// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id            Int              @id @default(autoincrement())
  username      String           @unique @db.VarChar(50)
  email         String           @unique @db.VarChar(100)
  passwordHash  String           @map("password_hash") @db.VarChar(255)
  isAdmin       Boolean          @default(false) @map("is_admin")
  isBlocked     Boolean          @default(false) @map("is_blocked")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  templates     Template[]
  forms         Form[]
  comments      Comment[]
  likes         Like[]
  preferences   UserPreferences?
  templateUsers TemplateUser[]  // Only keep valid relationships
  
  @@map("Users")
}
model Template {
  id          Int           @id @default(autoincrement())
  title       String        @db.VarChar(255)
  description String?
  topic       String?       @db.VarChar(50)
  imageUrl    String?       @map("image_url")
  isPublic    Boolean       @default(false) @map("is_public")
  authorId    Int?          @map("author_id")
  author      User?         @relation(fields: [authorId], references: [id])
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  questions   Question[]
  forms       Form[]
  comments    Comment[]
  likes       Like[]
  templateTags TemplateTag[]
  templateUsers TemplateUser[]
  
  @@map("Templates")
}

model Question {
  id                  Int            @id @default(autoincrement())
  templateId          Int            @map("template_id")
  template            Template       @relation(fields: [templateId], references: [id], onDelete: Cascade)
  title               String         @db.VarChar(255)
  description         String?
  type                QuestionType
  orderIndex          Int            @map("order_index")
  isDisplayedInTable  Boolean        @default(false) @map("is_displayed_in_table")
  answers             Answer[]
  
  @@map("Questions")
}

model Form {
  id          Int      @id @default(autoincrement())
  templateId  Int      @map("template_id")
  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  userId      Int?     @map("user_id")
  user        User?    @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  answers     Answer[]
  
  @@map("Forms")
}

model Answer {
  id          Int      @id @default(autoincrement())
  formId      Int      @map("form_id")
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  questionId  Int      @map("question_id")
  question    Question @relation(fields: [questionId], references: [id])
  value       String?
  
  @@map("Answers")
}

model Comment {
  id          Int      @id @default(autoincrement())
  templateId  Int      @map("template_id")
  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  userId      Int      @map("user_id")
  user        User     @relation(fields: [userId], references: [id])
  content     String
  createdAt   DateTime @default(now()) @map("created_at")
  
  @@map("Comments")
}

model Like {
  id          Int      @id @default(autoincrement())
  templateId  Int      @map("template_id")
  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  userId      Int      @map("user_id")
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  
  @@unique([templateId, userId])
  @@map("Likes")
}

model Tag {
  id          Int           @id @default(autoincrement())
  name        String        @unique @db.VarChar(50)
  templateTags TemplateTag[]
  
  @@map("Tags")
}

model TemplateTag {
  templateId  Int      @map("template_id")
  tagId       Int      @map("tag_id")
  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  tag         Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([templateId, tagId])
  @@map("Template_Tags")
}

model TemplateUser {
  templateId  Int      @map("template_id")
  userId      Int      @map("user_id")
  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@id([templateId, userId])
  @@map("Template_Users")
}

model UserPreferences {
  userId    Int      @id @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  language  Language @default(en)
  theme     Theme    @default(light)
  
  @@map("UserPreferences")
}

enum QuestionType {
  single_line
  multi_line
  integer
  checkbox
}

enum Language {
  en
  other
}

enum Theme {
  light
  dark
}